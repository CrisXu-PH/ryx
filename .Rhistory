pwd()
usethis::use_r("ryxFunction")
install.packages("MASS")
library(MASS)
x <- ryx(Boston, y="medv")
library(MASS)
ryx <- function(data, y, x){
if(missing(x)){
x <- names(data)[sapply(data, class)=="numeric"]
x <- setdiff(x, y)
}
df <- data.frame()
for (var in x){
res <- cor.test(data[[y]], data[[var]])
df_temp <- data.frame(variable = var,
r = res$estimate,
p = res$p.value)
df <- rbind(df, df_temp)
df <- df[order(-abs(df$r)),]
}
df$sigif <- ifelse(df$p < .001, "***",
ifelse(df$p < .01, "**",
ifelse(df$p < .05, "*", " ")))
results <- list(y=y, x=x, df=df)
class(results) <- "ryx"
return(results)
}
x <- ryx(Boston, y="medv")
print(x)
print(x)
print.ryx <- function(x){
output <- x$df
}
print(x)
print.ryx <- function(x){
output <- x$df
print(output)
}
print(x)
print.ryx <- function(x){
title <- cat("Correlations of ",x$y," with ")
df <- x$df[-c(1)]
print(title)
print(df)
}
print(x)
?colnames
print.ryx <- function(x){
cat("Correlations of ",x$y," with ")
df <- x$df[-c(1)]
rownames(df) <- c()
print(df)
}
print(x)
print.ryx <- function(x){
cat("Correlations of ",x$y," with \n")
df <- x$df[-c(1)]
rownames(df) <- c()
print(df)
}
print(x)
cat("Correlations of ",x$y," with \n")
df <- x$df
rownames(df) <- c()
print.ryx <- function(x){
cat("Correlations of ",x$y," with \n")
df <- x$df
rownames(df) <- c()
print(df)
}
print(x)
?as.data.frame
print.ryx <- function(x){
cat("Correlations of ",x$y," with \n")
df <- as.data.frame(x$df[1:4])
print(df)
}
print(x)
print.ryx <- function(x){
cat("Correlations of ",x$y," with \n")
df <- as.data.frame(x$df[1:4], row.names = FALSE)
print(df)
}
print(x)
print.ryx <- function(x){
cat("Correlations of ",x$y," with \n")
df <- as.data.frame(x$df[1:4], row.names = c())
print(df)
}
print(x)
print.ryx <- function(x){
cat("Correlations of ",x$y," with \n")
df <- as.data.frame(x$df[1:4], rownames = FALSE)
print(df)
}
print(x)
install.packages("DT")
?rebderDataTable
library(DT)
?rebderDataTable
?renderDataTable
print.ryx <- function(x){
library(DT)
cat("Correlations of ",x$y," with \n")
df <- DT::renderDataTable(df, rownames = FALSE)
print(df)
}
print(x)
print.ryx <- function(x){
library(DT)
cat("Correlations of ",x$y," with \n")
df <- DT::renderDataTable(df, rownames = FALSE)
df
}
print(x)
print.ryx <- function(x){
library(DT)
cat("Correlations of ",x$y," with \n")
df <- x$df
row.names(df) <- NULL
df
}
print(x)
print.ryx <- function(x){
library(DT)
cat("Correlations of ",x$y," with \n")
df <- x$df
row.names(df) <- NULL
print(df)
}
print(x)
?format
y <- MASS::Boston
?mtcars
usethis::use_vignette("ryx")
devtools::build()
usethis::use_readme_md()
devtools::build()
devtools::build()
install.packages("ryx")
usethis::use_readme_md()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::create_github_token()
gitcreds::gitcreds_set()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::build()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
ryx <- function(data, y, x){
if(missing(x)){
x <- names(data)[sapply(data, class)=="numeric"]
x <- setdiff(x, y)
}
df <- data.frame()
for (var in x){
res <- cor.test(data[[y]], data[[var]])
df_temp <- data.frame(variable = var,
r = res$estimate,
p = res$p.value)
df <- rbind(df, df_temp)
df <- df[order(-abs(df$r)),]
}
df$sigif <- ifelse(df$p < .001, "***",
ifelse(df$p < .01, "**",
ifelse(df$p < .05, "*", " ")))
results <- list(y=y, x=x, df=df)
class(results) <- "ryx"
return(results)
}
print.ryx <- function(x){
if(!inherits(x, "ryx")) stop("Must be class 'ryx'")
cat("Correlations of ",x$y," with \n")
varNames <- x$df$variable
rVal <- format(round(x$df$r,digits = 3), nsmall = 3)
pVal <- ifelse(x$df$p < 2e-16, "< 2e-16", formatC(x$df$p, format = "e", digits = 2))
sigif <- x$df$sigif
df <- as.data.frame(cbind(varNames, rVal, pVal, sigif))
colnames(df) <- c("variable", "r","p","sigif")
df
}
summary.ryx <- function(x){
if(!inherits(x, "ryx")) stop("Must be class 'ryx'")
x_vars <- ""
for (name in x$x){
x_vars<- stringr::str_trim(paste(x_vars, name, sep = " "))
}
strOutput <- cat(
"Correlating ",
x$y,
" with ",
x_vars,
"\nThe median absolute correlation was ",
round(median(abs(x$df$r)), digits = 3),
" with a range from ",
round(min(x$df$r),digits = 3),
" to ",
round(max(x$df$r),digits = 3),
"\n",
length(subset(x$df, p < 0.05)$p),
" out of ",
length(x$x),
" variables were significant at the p < 0.05 level."
)
}
plot.ryx <- function(x){
if(!inherits(x, "ryx")) stop("Must be class 'ryx'")
df <- x$df[order(abs(as.numeric(x$df$r)), decreasing = TRUE),]
df$direction <- factor(ifelse(df$r>=0, "positive", "negative"))
df$r <- abs(df$r)
ggplot2::ggplot(df, aes(x = r, y = reorder(variable, r)))+
geom_segment(aes(xend = 0, yend = variable),
color = "grey")+
geom_point(aes(color = direction), size = 3) +
scale_x_continuous(breaks = seq(0.0, 1.0, 0.1),
limits = c(0, 1))+
scale_color_manual(values = c("negative" = "red",
"positive" = "blue"))+
ylab("Variable")+
xlab("Correlation (absolute value)")+
labs(color = "Direction")+
ggtitle(paste("Correlations with",x$y))+
theme_bw()+
theme(element_line(linetype = "dashed"),
panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank())
}
